import * as React from "react"
import ava from '../images/ava.jpg'
// styles
const pageStyles = {
  color: "#232129",
  padding: 96,
  fontFamily: "-apple-system, Roboto, sans-serif, serif",
}
const avaStyles = {
  maxWidth: 320
}
const headingStyles = {
  marginTop: 0,
  marginBottom: 64,
  maxWidth: 640,
}
const headingAccentStyles = {
  color: "#663399",
}
const paragraphStyles = {
  marginBottom: 48,
  whiteSpace: "pre-line"
}
const codeStyles = {
  color: "#8A6534",
  padding: 4,
  backgroundColor: "#FFF4DB",
  fontSize: "1.25rem",
  borderRadius: 4,
}
const listStyles = {
  marginBottom: 96,
  paddingLeft: 0,
}
const listItemStyles = {
  fontWeight: 300,
  fontSize: 24,
  maxWidth: 560,
  marginBottom: 30,
}

const linkStyle = {
  color: "#8954A8",
  fontWeight: "bold",
  fontSize: 16,
  verticalAlign: "5%",
}

const descriptionStyle = {
  color: "#232129",
  fontSize: 14,
  marginTop: 10,
  marginBottom: 0,
  lineHeight: 1.25,
}

const badgeStyle = {
  color: "#fff",
  backgroundColor: "#088413",
  border: "1px solid #088413",
  fontSize: 11,
  fontWeight: "bold",
  letterSpacing: 1,
  borderRadius: 4,
  padding: "4px 6px",
  display: "inline-block",
  position: "relative",
  top: -2,
  marginLeft: 10,
  lineHeight: 1,
}

const cvData = [
  {
    date: "02.2020 - Настоящее время",
    title: "Ведущий инженер (Java Developer, DevOps)",
    description: `Обязанности

- Выполнение доработок в продуктах биллинговой системы Nexign (Java, Spring MVC, MyBatis, Ansible, Oracle, PostgreSQL, HSQL)
- Поддержка процесса CI

Достижения

- Переработан код сборки и доведен до ума инсталлятор продукта R, разработана новая функциональность по работе со справочниками (bash, ansible)
- В продукте T переосмыслена архитектура, разработаны и внедрены два новых клиентских отчёта (Java, Lombok, Jackson)
- В продукте O выполнен рефакторинг CI, налажены сборки и отгрузки продука, настроены automerge, создание стендов и раскатка продукта для команд разработки и тестирования (Teamcity, Ansible, Maven, Gradle, Kubernetes)
- В продукте O в данный момент выполняются доработки различных RestfulAPI-сервисов (Java Spring Mvc, Mybatis, Oracle / Postgres, Lombok), пишутся интеграционные тесты (Junit5)`
  },
  {
    date: "07.2019 - 02.2020",
    title: "Ведущий инженер (QA, DevOps, Python)",
    description: `Обязанности:

    - Развитие процесса автоматизации тестирования в проекте биллинговой системы компании.
    - Развитие программных модулей фреймворка автотестирования Robot Framework (Python).
    - Развитие процесса разработки и сборки продукта (TeamCity / Maven, Groovy).
    - Написание функциональных автотестов (Robot Framework, Python)
    - Небольшие доработки в продукте
    - Проведение интервью кандидатов на должность автоматизации тестирования, составление заданий
    - Регулярная проверка отчетов статических анализаторов безопасности перед выпуском релиза
    
    Достижения:
    
    - Упрощена разработка автотестов за счет внедрения Jinja2-templates во фреймворке автоматизации.
    - Множественные репозитории продукта переведены в единый монорепозиторий BitBucket, разработан новый набор утилит и скриптов для сборки результирующего дистрибутива.
    - Создан автоматизированный пайплайн на параллельных автотестах. Пайплайн автоматически собирает, устанавливает и тестирует продукт на любом количестве параллельных изолированных серверов, выполняя автотесты параллельно и независимо.
    
    Это привело проект к возможности быстро тестировать ветку с изменениями до вливания кода, сократив время ожидания от сборки до завершения автотестов на 70%.
    
    - Далее была выполнена еще более тесная взаимосвязь интеграционных автотестов с командой разработки. Команда тестирования готовит автотесты, после вливания тестов, регресс прогоняется на каждом pull request независимо друг от груга, тестируется каждая ветка ДО вливания кода в develop. Анализируются ошибки тестов и в виде отчета прилагаются в виде комментария в PR.
    
    Это вынудило разработчиков разгребать свои же ошибки самостоятельно и править их прямо в PR до мержа кода, это разгрузило команду тестирования. До этого команде приходилось отслеживать падение тестов после мержей в develop.`
  },
  {
    date: "09.2018 - 07.2019",
    title: "Старший инженер по автоматизации тестирования",
    description: `Обязанности:

    - Развитие процесса автоматизации тестирования в проекте биллинговой системы компании.
    - Развитие программных модулей фреймворка автотестирования Robot Framework (на языке Python).
    - Написание функциональных автотестов.
    - Поддержка и развитие CI.
    
    Достижения:
    
    - Описана стратегия автоматизации тестирования на проекте.
    - Создан процесс регулярных отчетов c метриками покрытия API функциональными тестами API.
    - Переработан и усовершенствован TeamCity проект для обеспечения более оптимальной и удобной работы на проекте.`
  },
  {
    date: "03.2016 - 09.2018",
    title: "Старший инженер по автоматизации тестирования",
    description: `Обязанности:

    - Развитие и поддержка процесса непрерывного системного автотестирования BSS-решения Nexign.
    - Развитие программных модулей фреймворка автотестирования на языке Python с использованием Robot Framework, развитие процесса Continuous Integration в TeamCity и Delivery.
    - Планирование и разработка автоматизированных системных автотестов для нужд продуктовых команд.
    - Организация процесса разработки тестов в рамках небольшой команды специалистов по автоматизации тестирования.
    
    Достижения:
    
    - Модуль по сокрытию чувствительных данных из тестовых логов.
    - Модуль для возможности добавления фиксированной тестовой конфигурации, а также интеграция с key-value storage.
    - Внедрение системы автоматизированного анализа результатов автотестов Report Portal и адаптация библиотеки для интеграции тестового фреймворка с данной системой.
    - Исследование автоматического формирования CI-проекта в TeamCity с использованием технологии хранения проекта в VCS на языке Kotlin.`
  },
  {
    date: "07.2015 - 03.2016",
    title: "Старший инженер по автоматизации тестирования",
    description: `Обязанности:

    - Тестирование базиса тестирования.
    - Тестирование разрабатываемой функциональности в рамках проекта по разработке API для системы по взаимодействию с клиентами.
    - Реализация функциональных автоматических тестов на Ruby Cucumber.
    - Реализация тестов производительности с использованием Jmeter.
    
    Достижения:
    
    Задача по расширению фреймворка автоматизации тестирования под новую архитектуру программного комплекса компании:
    
    - Разработан новый процесс развертывания виртуальных окружений на платформе VMWare VRA
    - Написаны автоматизированные инсталляторы для развертывания окружения и программных компонентов с использованием технологии Ansible,
    - Переписаны программные слои фреймворка (тоже на Ruby) для возможности тестирования компонентов новой архитектуры (нового API).`
  },
  {
    date: "02.2011 - 07.2015",
    title: "Инженер по автоматизации тестирования",
    description: `Ручное тестирование API системы по обеспечению взаимодействия с клиентами, автоматизация тестовых сценариев на Ruby Cucumber.`
  }
]

const links = [
  {
    title: "LinkedIn",
    url: "https://www.linkedin.com/in/ailjushkin"
  }, 
  {
    title: "VK",
    url: "https://vk.com/ailjushkin"
  },
  {
    title: "Telegram",
    url: "https://t.me/ailjushkin"
  }
]

// markup
const IndexPage = () => {
  return (
    <main style={pageStyles}>
      <title>Home Page</title>
      <h1>
        Илюшкин Александр Михайлович
        <br />
        <span style={headingAccentStyles}>- Curriculum Vitae!</span>
        <span role="img" aria-label="">😉</span>
      </h1>
      <img src={ava} style={avaStyles}></img>
      <h2>Ссылки на профили</h2>
      <ul style={paragraphStyles}>
        {
          links.map( link =>
            (
              <li key={link.url}>
                <a style={linkStyle} href={link.url} target="_blank">{link.title}</a>
              </li>
            )
          )
        }
      </ul>
      {cvData.map(cv => (
          <div>
            <h3 style={headingAccentStyles}>{cv.title}</h3> 
            <h4>{cv.date}</h4>
            <div style={paragraphStyles}>{cv.description}</div>
          </div>
        )
      )}
    </main>
  )
}

export default IndexPage
